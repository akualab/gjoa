package model

import (
	"encoding/json"
	"fmt"
	"github.com/golang/glog"
	"io"
	"io/ioutil"
	"math/rand"
	"os"
	"reflect"
)

var modelTypes = make(map[string]Modeler)

// All model types must register during initialization:
//
// func init() {
//	 m := new(MyModel)
//	 model.Register(m)
// }
func Register(model Modeler) {
	value := reflect.Indirect(reflect.ValueOf(model))
	name := value.Type().Name()
	modelTypes[name] = model
	fmt.Printf("DEBUG: name: %s\n", name)
}

// Returns an uninitialized instance of the model.
func Model(typeName string) (Modeler, error) {

	t := modelTypes[typeName]
	if t == nil {
		return nil, fmt.Errorf("Unknown model typr [%s].", typeName)
	}
	return t, nil
}

// Returns a random observations generated by the model.
// obs is the random observation.
// sequence applies to Markov models.
type Generator interface {
	Random(r *rand.Rand) (obs interface{}, sequence []int, e error)
}

// A read-only model.
type Modeler interface {

	// Creates a new model using the values sturct.
	New(values interface{}) (Modeler, error)

	// Returns the probabilty of obs given the model.
	Prob(obs interface{}) float64

	// Returns the log probabilty of obs given the model.
	LogProb(obs interface{}) float64

	// The model name.
	Name() string

	// Dimensionality of the observation verctor.
	NumElements() int

	// True if the model is trainable.
	Trainable() bool

	// Writes values to a Writer.
	Write(w io.Writer) error

	// Returns the model values.
	Values() interface{}
	Generator
}

// A trainable model.
type Trainer interface {
	Modeler

	Update(a []float64, w float64) error
	Estimate() error
	Clear() error
	SetName(name string)
	NumSamples() float64
}

// A trainable sequence model.
type SequenceTrainer interface {
	Modeler

	Update(seq [][]float64, w float64) error
	Estimate() error
	Clear() error
	SetName(name string)
	NumSamples() float64
}

// Implements basic functionality for models. Model implementations can embed
// this type. The field Base.Model must be initialized to point to the model
// implementation.
type BaseModel struct {
	Model Modeler
}

func NewBaseModel(m Modeler) BaseModel {
	return BaseModel{m}
}

// Unmarshals data into a Values struct. The original model instance is not modified.
// Returns a new model instance of teh same type as the original.
func (base *BaseModel) Read(r io.Reader) (Modeler, error) {

	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	values := base.Model.Values()
	err = json.Unmarshal(b, values)
	m, e := base.Model.New(values)
	if e != nil {
		return nil, e
	}

	return m, err
}

// Reads model data from file. See Read().
func (base *BaseModel) ReadFile(fn string) (Modeler, error) {

	f, err := os.Open(fn)
	if err != nil {
		return nil, err
	}
	return base.Read(f)
}

// Writes model values to an io.Writer.
func (base *BaseModel) Write(w io.Writer) error {

	b, err := json.Marshal(base.Model.Values())
	if err != nil {
		return err
	}
	_, e := w.Write(b)
	return e
}

// Writes model values to a file.
func (base *BaseModel) WriteFile(fn string) error {

	f, err := os.Create(fn)
	if err != nil {
		return err
	}
	defer f.Close()

	ee := base.Write(f)
	if ee != nil {
		return ee
	}

	glog.Infof("Wrote model \"%s\" to file %s.", base.Model.Name(), fn)
	return nil
}

// Returns the model type as a string..
func (base *BaseModel) Type() string {

	model := base.Model
	value := reflect.Indirect(reflect.ValueOf(model))
	name := value.Type().Name()
	return name
}
